// what is difference between constructor and initilizer block?

	In Java, constructors and initializer blocks are mechanisms used to initialize objects, but they have different 
	purposes, syntax, and use cases. Here’s a detailed comparison:

	Constructor
	- A special method with the same name as the class.
	- Invoked explicitly when an object is created using new.
	- Can be overloaded to provide multiple ways of object initialization.
	- Executes after all initializer blocks (if present).
	- Used for object-specific initialization.
	- Cannot be static.

	Initializer Block
	- A block of code within braces {} that runs automatically when an object is created.
	- Executes before the constructor.
	- Cannot be overloaded.
	- Used for common initialization logic shared across all constructors.
	- Can also have static variants for initializing static variables, executed once when the class is loaded.



    ### **Constructor vs. Initializer Block (Short Summary)**

| **Aspect**         | **Constructor**                                                             | **Initializer Block**                                                      |
|---------------------|-----------------------------------------------------------------------------|----------------------------------------------------------------------------|
| **Definition**      | Special method to initialize an object during creation.                    | Block of code executed before the constructor during object creation.      |
| **Syntax**          | Same name as class, no return type.                                        | `{ ... }` — code enclosed in curly braces.                                 |
| **Execution**       | Called explicitly or implicitly during object creation.                   | Executed automatically before any constructor.                             |
| **Parameterization**| Can take parameters for custom initialization.                            | Cannot take parameters.                                                    |
| **Overloading**     | Supports overloading (multiple constructors with different parameters).    | Cannot be overloaded; executed in order of appearance.                     |
| **Purpose**         | Initialize the object based on input arguments.                           | Common initialization logic shared across all constructors.                |