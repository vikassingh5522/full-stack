

ü´°‚úÖ
Constructor chaining in Java refers to the process of calling one constructor 
	from another within the same class or in a superclass. It allows you to reuse code by having one
	constructor invoke another, reducing redundancy and ensuring consistent initialization of an object.

	- Within the Same Class (Using this()):
		A constructor calls another constructor of the same class.

	- From a Superclass (Using super()):
		A subclass constructor calls a constructor of its superclass.


--------------------------------------------------------------------------------------------------------------------


	
public class DemoChainCon {
    private String name;
    private int age;
    private String grade;

    // Default constructor
    public DemoChainCon() {
        this("Unknown", 0, "Not Assigned");  // Calls the parameterized constructor
		System.out.println("\n Default constructor of DemoChainCon class");
    }

    // Constructor with two parameters
    public DemoChainCon(String name, int age) {
        this(name, age, "Not Assigned");  // Calls the constructor with three parameters
		System.out.println("\n Para(args-2) constructor of DemoChainCon class");
    }

    // Parameterized constructor with three parameters
    public DemoChainCon(String name, int age, String grade) {
		System.out.println("\n Para(args-3) constructor of DemoChainCon class");
        this.name = name;
        this.age = age;
        this.grade = grade;
    }

    public void display() {
        System.out.println("Name: " + name + ", Age: " + age + ", Grade: " + grade);
    }

    public static void main(String[] args) {
        DemoChainCon s1 = new DemoChainCon();  // Calls default constructor
        DemoChainCon s2 = new DemoChainCon("Amol", 20);  // Calls two-parameter constructor
        DemoChainCon s3 = new DemoChainCon("Baba", 22, "A");  // Calls three-parameter constructor

        s1.display();  // Output: Name: Unknown, Age: 0, Grade: Not Assigned
        s2.display();  // Output: Name: Alice, Age: 20, Grade: Not Assigned
        s3.display();  // Output: Name: Bob, Age: 22, Grade: A
    }
}

	** Note: this() must be first statement in constructor while chaining.


---------------------------------------------------------------------------------------------------------------
‚úîÔ∏è
Constructor Chaining Between Superclass and Subclass:
		You use the keyword super() to call the constructor of the superclass.


        class A
{
	int a;
	public A()
	{
		System.out.println("\n In default constructor of A class");
		a=10;
	}
	public A(int a)
	{		
		System.out.println("\n In para constructor of A class");
		this.a=a;
	}
	public void showa()
	{
		System.out.println("\n a="+a);
	}
}
class B extends A
{
	int b;
	public B()
	{
		System.out.println("\n In default constructor of B class");
		b=20;
	}
	public B(int a, int b)
	{		
		super(a);
		System.out.println("\n In para constructor of B class");
		this.b=b;
	}
	public void show()
	{
		showa();
		System.out.println("\n b="+b);
	}
}
class ChainConSuper
{
	public static void main(String []args)
	{
		B ob1 = new B();
		ob1.show();

		B ob2 = new B(100,200);
		ob2.show();
	}
}